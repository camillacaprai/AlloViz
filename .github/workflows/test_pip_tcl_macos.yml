name: MacOS Python Package using pip and tcl

on:
  push:
    branches:
      - reg_test
      - fix_submodules

jobs:
  job:
    name: pip tcl macos
    runs-on: macos-latest
    strategy:
      matrix:
        symbols:
          - 'no'
        options:
          - '--disable-aqua'
    defaults:
      run:
        shell: bash
        working-directory: unix


    steps:
    - name: Clone AlloViz
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10.6"
        cache: "pip"
        cache-dependency-path: dev/dev_env.txt


    # TCL IN MACOS
    - name: Checkout Tk
      uses: actions/checkout@v3
      with:
        repository: tcltk/tk
        path: tk
    - name: Checkout Tcl 8.7
      uses: actions/checkout@v3
      with:
        repository: tcltk/tcl
        ref: core-8-5-branch
        path: tcl
    - name: Prepare checked out repository
      run: |
        touch ../generic/tkStubInit.c ../doc/man.macros
        mkdir "$HOME/install"
      with:
        working-directory: tk
    - name: Add Tcl
      run: |
        brew install tcl-tk
    - name: Add X11
      run: |
        brew install --cask xquartz
        sudo /opt/X11/libexec/privileged_startx || true
    - name: Configure (symbols=${{ matrix.symbols }} ${{matrix.options }})
      # Note that macOS is always a 64 bit platform
      run: |
        ./configure --enable-64bit --enable-framework --disable-xft --with-tcl=/usr/local/opt/tcl-tk/lib --x-includes=/opt/X11/include --x-libraries=/opt/X11/lib CFLAGS=-I/usr/local/opt/tcl-tk/include ${CFGOPT} "--prefix=$HOME/install" || {
          cat config.log
          echo "::error::Failure during Configure"
          exit 1
        }
      env:
        CFGOPT: --enable-symbols=${{ matrix.symbols }} ${{matrix.options }}
    - name: Build
      run: |
        make binaries libraries tktest || {
          echo "::error::Failure during Build"
          exit 1
        }
        make install || {
          echo "::error::Failure during Install"
          exit 1
        }
    


    # - name: Cache pip deps
    #   uses: actions/cache@v3
    #   with:
    #     path: ${{ env.pythonLocation }}
    #     key:
    #       ${{ env.pythonLocation }}-pip-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('dev/dev_env.txt') }}-${{ env.CACHE_NUMBER }}
    #   env:
    #     # Increase this value to reset cache if has not changed
    #     CACHE_NUMBER: 0
    #   id: cache

    - name: Install dependencies
      run: |
        python -m pip install -U --upgrade-strategy eager pip
        pip install -U --upgrade-strategy eager setuptools "numpy>=1.22.4,<1.22.5"
        pip install -r dev/dev_env.txt

    # - name: Update environment
    #   run:
    #     mamba env update -n anaconda-client-env -f dev/dev_env_out.yml
    #   if: steps.cache.outputs.cache-hit != 'true'

    - name: Install AlloViz
      run: pip install .

    # - name: Lint with flake8
    #   run: |
    #     conda install flake8
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: pytest test